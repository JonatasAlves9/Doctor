name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Analyze, and Check Code Coverage
    runs-on: windows-latest  # Adjust as needed (e.g., ubuntu-latest)

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'  # Consider alternatives for compatibility

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones disabled for better analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        uses: actions/cache@v4
        id: cache-sonar-scanner
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner (if cache miss)
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scannercheckout@v4  # If necessary, download the code coverage tool
        with:
          repository: 'YOUR_COVERAGE_TOOL_REPOSITORY'  # Replace with actual repository URL
          ref: 'vLATEST'  # Adapt based on the tool's versioning scheme

      - name: Build and analyze (replace with your build and analysis commands)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell  # Adjust shell if needed
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"hackathon-POSTECH_Doctor" /o:"hackathon-postech" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build  # Replace with your build command
          dotnet test --collect="XUnit.CodeCoverage"  # Example using XUnit.CodeCoverage (adjust based on your tool)
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Calculateupload-artifact@v3
        with:
          name: coverage-reports  # Adjust as needed
          path: '**/coverage/*.xml'  # Adapt based on your tool's report format

      - name: Check code coverage (replace with your tool's specific checks)
        # Example using a placeholder tool 'check-code-coverage' that accepts a percentage threshold
        uses: themichaelhall/check-code-coverage@v2.0.0
        with:
          threshold: 80  # Adjust threshold as needed
          fail_on_decline: true  # Set to false if declines should only warn, not fail

    # Optionally, add a step to display code coverage results in the GitHub UI:
    # - name: Display code coverage
    #   uses: EnricoMi/publish-coverage@v5
    #   with:
    #     coverage: 'coverage/*.xml'  # Adapt path based on your tool's report format
    #     fail_on_ratings: false  # Set to true to fail if ratings are poor